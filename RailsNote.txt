————————————————————————————————————————————

【mac RVM 装 Ruby 版本】
  解决
  rvm install ruby-1.9.3 —with-gcc=’which gcc’
【Mac pg gem 安装报错】
  解决
  brew install Postgresql
【database.yml 格式报错】
    原因 yml 不能有\t 的特殊符号
  default: &defaultå
  adapter: postgresql
  encoding: unicode
  encoding: unicode
  pool: 5
  username: postgres
  password: 520677

development:
  <<: *default
  database: "HX-Meteor"

————————————————————————————————————————————

【搜索传参数】
<controller>

 def search
    @search = Book.where("title like'%#{params[:search]}%' or author like'%#{params[:search]}%'or introduction like '%#{params[:search]}%'").
        limit(10).
        offset("#{params[:page]}").
        order("id DESC")
    if @search.count == 0
      flash[:notice] ='没有找到相关内容，请检查搜索内容！'#网页提示
      redirect_to action: 'index'
    else
      @all = {response:200,total_id:@search.count,data:@search}
      respond_to do |format|
        format.html
        format.json{render json: @all}
      end
    end
  end

<routes.rb>

  resources :books do
    get 'search' , :on => :collection
  end

<view>

<%= flash[:notice]%>
<form action="books/search" method="get" style="text-align: center">
  <input type="text" name="search" size="40" value="请输入搜索内容"
  onFocus="if(value==defaultValue){value='';this.style.color='blue'}"
   onBlur="if(!value){value=defaultValue;this.style.color='red'}"
  style="font-size: 20px" />
  <input type="submit" value="随便一搜" style="font-size: 20px" />
</form>
onFocus方法：当鼠标指针活动指向
onBlur  方法：当鼠标指针没有活动指向时


————————————————————————————————————————————

【文件上传】
实用gem 'Carrierwave'

#encoding: utf-8
require "digest/md5"
require 'carrierwave/processing/mini_magick'
class BaseUploader < CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick
  storage :grid_fs

  def store_dir
    "#{model.class.to_s.underscore}"
  end

  # 调整临时文件的存放路径，默认是再 public 下面
  def cache_dir
    "#{Rails.root}/tmp/uploads"
  end

  # TODO: 此处要想办法，开启了 open-uri 下载的因为文件名的问题无法通过验证
  def extension_white_list
    %w(jpg jpeg gif png)
  end

 #对上传的文件系统重命名，采用digest
  def filename
    if original_filename
      @name ||= Digest::MD5.hexdigest(current_path)
      "#{@name}.#{file.extension}"
    end
  end
end
实用步骤
１、在 Gemfile 文件里加入 gem 'carrierwave'
２、bundle install 等待自动部署安装
３、在控制台使用命令 rails generate uploader image
４、 使用工具到 app/uploaders/image_uploader.rb
５、打开需要上传文件的 Models，如我想上传 teachers 的 photo
class Teacher < ActiveRecord::Base
   mount_uploader :photo, ImageUploader
end


————————————————————————————————————————————
【文本输入框参数】
placeholder ： 文本框提示内容

rows : 行数

cols  ：长度

————————————————————————————————————————————

【下拉选择参数】

<%= f.select :recommend,['★','★★','★★★','★★★★','★★★★★'],:prompt => '-------请选择------',:include_blank => true %>
:recommend后用[]添加选择的参数
:prmpt 添加提示文字
:include_blank 提供空值选项

————————————————————————————————————————————
【controller render返回信息】
文本
render :text => tips

Json
render json: tips

————————————————————————————————————————————
【Ruby 异步请求跨域的问题】
Can't verify CSRF token authenticity
解决方法：
http://blog.csdn.net/yc1022/article/details/11907411
在controller 里加入
  skip_before_filter :verify_authenticity_token, :only => [:create]
 例子
def create
    @feedback = Feedback.new(params[:feedback])
    @feedback.content = params[:content]
    @feedback.contact = params[:contact]
      if @feedback.save
        tips = {response:200,tips:'成功',return:1}
      else
        tips = {response:200,tips:'失败',return:0}
      end
    render json: tips
  end

————————————————————————————————————————————
【Time.now 时间格式问题】
%Y 取年的数值
%m 取月份
%d 取天数
%H 取小时
%M 取分钟
%S 取秒
如转化成2012-12-12 12:12:12
Time.now.strftime('%F %R:%S')
Time.now.strftime('%Y-%m-%d %H:%M:%S')
转化成2012-12-12
Time.now.strftime('%Y-%m-%d')
从数据库取时间数据，会转换成(2014-02-21T11:04:42+08:00)
可以在该时间后面加上格式strftime('%Y-%m-%d %H:%M:%S')转化成 (2014-02-21 11:04:42)
日期转数字 ‘2015-08-26 00:00:00’.to_time.to_i
数字转日期 Time.at(1440518400)


————————————————————————————————————————————
【数据分页问题】
用gem 'will_paginate'
例子
在controller中
require 'will_paginate'
class StoreController < ApplicationController
  skip_before_filter :authorize
  def index
    @products = Product.paginate :page=>params[:page],
                                 :order=>'created_at desc' ,
                                 :per_page => 2
    @cart = current_cart
  end
end
在view中机上
<p style="text-align: center"><%= will_paginate @products , :previous_label=> '上一页',:next_label=> '下一页' %></p>
————————————————————————————————————————————
【文字编辑器】
view中
 <script charset="utf-8" src="/kindeditor/kindeditor-min.js"></script>
 <script charset="utf-8" src="/kindeditor/lang/zh_CN.js"></script>
    <script type="text/javascript">
        KindEditor.ready(function(A) {
          window.editor = A.create('#exam_item_talk');
        });
        <tr>
          <td style="width: 100px;font-size: 18px;text-align: center">口语：</td>
          <td><%= f.text_area :talk, :rows=>5 %></td>
          </tr>
————————————————————————————————————————————
【数据到处excel】
1、在Gemfile中加入
gem 'to_xls'

bundle install

2、在 config/initializers/mime_types.rb 中添加对 xls 格式的支持

Mime::Type.register "application/vnd.ms-excel", :xls

3、在controller里添加

def index

    @users = User.all

    respond_to do |format|

      format.xls { send_data @users.to_xls, :filename => 'users.xls' }
    end

  end

————————————————————————————————————————————
【ios设备消息推送】
1、 Gemfile 中加入
         gem 'grocer'
2、在controller里填写
 def push_messages

     pusher = Grocer.pusher(
         certificate: "#{Rails.root.to_s}/public/apple_pem/tpock.pem",
         #certificate: "#{Rails.root}/public/apple/#{@ios_app.pem_name}",      #根据不同应用调用相应的上传密钥
         passphrase:  '1q2w3e4r',                       # optional
         gateway:     'gateway.sandbox.push.apple.com', # optional; See note below.
         port:        2195,                     # optional
         retries:     3                         # optional
     )
     notification = Grocer::Notification.new(
         device_token:      'b969ffdc6b651c968fd079d29994f0676156cca2aa81e94cf427d4307a5fe419', #设备应用号
         alert:                    '收到请回答！',
         badge:             1,
         sound:             "Default",         # optional
         expiry:            Time.now + 60*60,     #消息保存时间，0是不保存
         identifier:        1234,                 # optional
         content_available: true                  # optional; any truthy value will set 'content-available' to 1
     )
     pusher.push(notification)
   end
3、在rooter.rb 中

    match 'push_messages' => 'ios_messages#push_messages'

4、在views中
   <a href="/push_messages">消息推送</a>
————————————————————————————————————————————
【字符串拼接、截取、问题】
string ="1421412423142314==\n"
string.gsub("==\n","==")
string.chomp                        #用于去除字符串末尾的\r,\n等
string ="1421412423142314=="
截取手机号后四位
phone=11122223333
3333 =phone[7,4]                #从第七位开始，截取四位

————————————————————————————————————————————
【数据保存有效数据】
如sum=1.543253245
sum.round(2)                       #
sum = 1.54
————————————————————————————————————————————
【对称加密】

gem fast-aes

base64

————————————————————————————————————————————
【Http post 请求】

require 'net/http'

 uri = URI('http://crm.1680.me/sendXSms.do')
 Net::HTTP.post_form(uri,'username'=>'xiaoma')


————————————————————————————————————————————
【多表关联返回数据，组合成json】

    @comment_index = LiveComment.where("open_course_id=#{@open_course.id}").order('id DESC').limit(5)
    @index_array = Array.new                                                                                                                            #新建数组
    @comment_index.each do |item|
      user = MobileUser.find_by_id(item.user_id)                                                                                               #找出关联字段

      comments = {id:item.id,user_id:item.user_id,avatar:user.avatar,username:user.username,
                                                      comment:item.comment,comment_time:item.comment_time}                        #拼接数据

      @index_array.push(comments)   #将数据添加到数组
    end

      tip = {response:200,count:@comment_push.count,local_min:@comment_push.last.id,data:@push_array}   #组合成json格式

    respond_to do |f|
      f.json {render json: tip}                                                                                                                                #返回结果
    end


————————————————————————————————————————————
【gem 指定源】

命令：gem sources -a http://ruby.taobao.org

由于大陆的“特殊情况”，rails默认生成的Gemfile的源 https://rubygems.org 很慢甚至被重置，
所以适应国情，要修改下Rails默认生成的Gemfile文件。如何做呢？

很简单，切换到Rails的默认模板路径下，修改Gemfile文件的source:
1、

cd $rvm_path/gems/ruby-1.9.3-p194@rails32/gems/railties3.2.5/lib/rails/generators/rails/app/templates/

2、

修改Gemfile文件，替换 https://rubygems.org 为 http://ruby.taobao.org

————————————————————————————————————————————

【发送定时任务】
链接地址：http://www.cnblogs.com/fantiantian/p/3388367.html
1、在Gemfile中加入
     gem 'rufus-scheduler'

2、在config/initializers/task.rb 中
#encoding : utf-8
require 'rufus-scheduler'
require 'jpush_api_ruby_client'
scheduler = Rufus::Scheduler.new

scheduler.every  '10s'  do  #每隔十秒发送一次
  local_time = Time.now.strftime('%Y-%m-%d %H:%M')
  @task = TimeTask.where('task_status=0')
  if !@task.blank?               #集合不为空则执行
    @task.each do |item|
      task_time = item.task_time.strftime('%Y-%m-%d %H:%M')
      if local_time == task_time
        app_key = '4f955ddda71b1e09e1ed71c7'
        master_secret = '87812ec711fabf7d16ff193f'
        push_client = JPushApiRubyClient::Client.new(app_key, master_secret,'platform' => JPushApiRubyClient::PlatformType::BOTH)
        send_no = push_client.generate_send_no
        msg_title = item.task_title
        msg_content = item.task_content
        receiver_value = item.task_tag
        push_client.send_notification_with_tag(send_no, receiver_value, msg_title, msg_content)
      end
    end
  end
   p "定时任务刷新完毕！当前时间#{local_time}"
 end

————————————————————————————————————————————
【Google 验证码 ReCaptcha 】
1、在Gemfile中加入
gem 'recaptcha', :require => 'recaptcha/rails'

2、config/initializers/recaptcha.rb

Recaptcha.configure do |config|
  config.public_key  = '6LcgSPASAAAAAMBX3cszNTF5U3iaxyQ3ir5LBBPj'
  config.private_key = '6LcgSPASAAAAANZl8y1fifBvvTP0WDH9UYx055ry'
  config.proxy = 'http://load.data.xiaoma.com/'
end

3、在view中
          <td style="width: 120px;text-align: right;font-size: 18px">验证码：</td>
          <td><%= recaptcha_tags :public_key => '6LcgSPASAAAAAMBX3cszNTF5U3iaxyQ3ir5LBBPj' %></td>

4、在controller的action中

 respond_to do |format|

      if verify_recaptcha(:model => @custom_form,:private_key => '6LcgSPASAAAAANZl8y1fifBvvTP0WDH9UYx055ry', :message => '验证码错误！')
          && @custom_form.save
        format.html { redirect_to custom_forms_path, alert: '表数据添加成功！' }
      else
        format.html { render action: "new" }
      end
    end

————————————————————————————————————————————
【极光消息推送】
链接：https://github.com/jpush/jpush-api-ruby-client/blob/master/example/client_example.rb

require 'jpush_api_ruby_client'

class ClientExample

  app_key = '466f7032ac604e02fb7bda89' #必填，例如466f7032ac604e02fb7bda89
  master_secret = '57c45646c772983fede7c455' #必填，每个应用都对应一个masterSecret

  # 保存离线的时长。秒为单位。最多支持10天（864000秒）。
  # 0 表示该消息不保存离线。即：用户在线马上发出，当前不在线用户将不会收到此消息。
  # 此参数不设置则表示默认，默认为保存1天的离线消息（86400秒）。

  time_to_live = 60 * 60 * 24

  #
  # Example1: 初始化,默认发送给android和ios，同时设置离线消息存活时间
  # jpush_client = JPushApiRubyClient::Client.new(app_key, masterSecret, 'time_to_live' => time_to_live)
  #
  # Example2: 只发送给android
  # jpush_client = JPushApiRubyClient::Client.new(app_key, master_secret, 'platform' => JPushApiRubyClient::PlatformType::ANDROID);
  #
  # Example3: 只发送给IOS
  # jpush_client = JPushApiRubyClient::Client.new(app_key, master_secret, 'platform' => JPushApiRubyClient::PlatformType::IOS);
  #
  # Example4: 只发送给android,同时设置离线消息存活时间
  # jpush_client =JPushApiRubyClient::Client.new(app_key, master_secret, 'time_to_live' => time_to_live, 'platform' => JPushApiRubyClient::PlatformType::ANDROID);
  #
  #Example5: 使用缺省值发送，默认 time_to_live 为保存1天的离线消息 ，发送给IOS,android两个平台
  # jpush_client = JPushApiRubyClient::Client.new(app_key, master_secret)
  #

  jpush_client = JPushApiRubyClient::Client.new(app_key, master_secret,'platform' => JPushApiRubyClient::PlatformType::BOTH)

  #jpush_client.enable_ssl(true) 是否启用https请求，缺省false


  send_no = jpush_client.generate_send_no
  msg_title = 'JPushApiRubyClient实例'

  msg_content = '根据 appkey 发送广播通知'
  puts send_result = jpush_client.send_notification_with_appkey(send_no, msg_title, msg_content)

=begin
  带上可选参数调用  opts参数可包含 builder_id 、extras 、override_msg_id
  puts send_result = jpush_client.send_notification_with_appkey(send_no,
                                                                msg_title,
                                                                msg_content,
                                                                'builder_id' => 0,
                                                                'extras' => {'key1'=> 'value1','key2'=>'value2'},
                                                                'override_msg_id' => '这里输入你上一条消息的msg_id')
=end
  msg_content = '根据 tag 发送通知'
  puts send_result = jpush_client.send_notification_with_tag(send_no, '这里输入你的tag', msg_title, msg_content)

  msg_content = '根据 alias 发送通知'
  puts send_result = jpush_client.send_notification_with_alias(send_no, '这里输入你的alias', msg_title, msg_content)

  msg_content = '根据 imei 发送通知'
  puts send_result = jpush_client.send_notification_with_imei(send_no, '这里输入你的imei', msg_title, msg_content)


  msg_content = '根据 appkey 发送自定义消息'
  puts send_result = jpush_client.send_message_with_appkey(send_no, msg_title, msg_content)
=begin
  带上可选参数调用  opts参数可包含 extras 、override_msg_id
  puts send_result = jpush_client.send_message_with_appkey(send_no,
                                                                msg_title,
                                                                msg_content,
                                                                'extras' => {'key1'=> 'value1','key2'=>'value2'},
                                                                'override_msg_id' => '这里输入你上一条消息的msg_id')
=end

  msg_content = '根据 tag 发送自定义消息'
  puts send_result = jpush_client.send_message_with_alias(send_no, '这里输入你的tag', msg_title, msg_content)

  msg_content = '根据 alias 发送自定义消息'
  puts send_result = jpush_client.send_message_with_tag(send_no, '这里输入你的alias', msg_title, msg_content)

  msg_content = '根据 imei 发送自定义消息'
  puts send_result = jpush_client.send_message_with_imei(send_no, '这里输入你的imei', msg_title, msg_content)

end
————————————————————————————————————————————

【实例化字符串-instance_eval】
解决问题
====> <%= @itme.value+number+=1 %> #报错
          <%= @itme.instance_eval("value#{number+=1}") %> ==<%= @itme.value1 %>

————————————————————————————————————————————
【生成随机字符串】
从自定范围中随机生成
 [*'a'..'z',*'0'..'9',*'A'..'Z'].sample(6).join
随机生成
SecureRandom.hex 4
100.times do

end
————————————————————————————————————————————
【根据环境Rails.env动态调用】

gem fume-settable

配置app/model/settings.rb

class Settings < Fume::Settable::Base
  ruby_provider Rails.root.join('config/settings.rb') #引用文件路径

  def self.method_missing(name, *args, &block) #缺省方法
    settings.send(name, *args, &block)
  end
end

设置数据内容 /initializers/settings.rb
settings.action = {
  development: ‘A’,
  production: ‘B’,
  test: ‘C’
}

配置调用
Settings.action.send.(“#{Rails.env}”)

————————————————————————————————————————————
【时间格式】 strftime(format)

按照format字符串的模式,将时间变为字符串,并返回结果. format字符串可以使用下列形式.



%A: 星期几的名称(Sunday, Monday... )

%a: 星期几的简称(Sun, Mon ... )

%B: 月份的名称(January, February... )

%b: 月份的简称(Jan, Feb ... )

%c: 日期和时间

%d: 日期(01-31)

%H: 24时制的小时(00-23)

%I: 12时制的小时(01-12)

%j: 一年中的第几天(001-366)

%M: 分钟(00-59)

%m: 表示月份的数字(01-12)

%p: 上午/下午(AM,PM)

%S: 秒钟(00-60) (60是闰秒)

%U: 表示周的数字.以第一个星期天作为第一周的开始(00-53)

%W: 表示周的数字.以第一个星期一作为第一周的开始(00-53)

%w: 表示星期几的数字. 星期天是0(0-6)

%X: 时刻

%x: 日期

%Y: 表示公历年份的数字

%y: 公历年份的后两位数字(00-99)

%Z: 时区trap

%%: %本身
————————————————————————————————————————————
Sublime Text 配置
{
  "caret_style": "phase",
  "color_scheme": "Packages/Predawn/predawn.tmTheme",
  "font_face": "monaco",
  "font_size": 15,
  "highlight_line": true,
  "ignored_packages":
  [
    "Vintage"
  ],
  "show_encoding": true,
  "tab_size": 2,
  "theme": "predawn.sublime-theme",
  "translate_tabs_to_spaces": true,
  "trim_trailing_white_space_on_save": true,
  "update_check": false,
  "word_wrap": false,
  "save_on_focus_lost": true
}
————————————————————————————————————————————

【Git命令】
禁用忽略文件大小写
git config --global core.ignorecase false

撤销 add 的文件
  如果是撤销所有的已经add的文件:
  git reset HEAD .

  如果是撤销某个文件或文件夹：
  git reset HEAD -filename

git reset --hard <commit ID号>
commit ID号使用 git log 查看

多人协作先使用fetch获取服务器最新信息
  git fetch

在分支切换的时候，如果有修改，可以进行还原
  git co <file>

在Git Add 命令添加多余文件时，可以进行撤销处理
  git reset HEAD <file>

与远程分支A同步
  git reset --hard origin/A

清理本地多余分支
  git remote prune origin

删除本地分支
  git branch -d AAAA

删除远程分支
  git push origin :AAAA
  git push --delete origin AAAA

基于A分支添加新的分支
  git co A
  git co -b “B”

合并分支 B合并到 A
  1、切换主分支A分支
  git co A
  git plo A   # 保持 A分支代码是最新的
  2、切换到需要的分支 B
  git co B
  git plo B # 保持 B分支代码是最新的
  3、在 B 分支下 rebase 到 A
    git rebase A
    如果有冲突，将冲突解决掉 继续执行 rebase
  4、完成所有冲突后，merge，切换到 A主分支下
  git merge B --no-ff -m "合并分支:B"

多人开发一个分支A
   如果在push时有他人提交，则提交失败
    git fetch   拉取 andorigin 数据
    git rebase origin/A   将本地分支rebase到远程分支
    git push origin A -f   强制推送 !! 会将本地代码覆盖远程代码，谨慎操作
    git push origin A

版本回退
git reset –hard commit (5a5c51812390ed7efcccc0d354669a4aa158b251)
git reset --hard 6c5df72480e2ec98031540934c7ff1c4dbd04e88

更新本地冲突
  收起本地修改
  git stash
  查看收起
  git stash list
——————————————————————————————————
PG 备份恢复数据
     pg_dump -Uusername dbname > date.dump
     psql -Uusername dbname -hlocalhost -W < date.dump

PostgreSQL导入sql文件
psql  -U username -W -d dbname -f xx.sql

远程数据拷贝
    scp -P 52225 www-data@119.254.100.96:/var/www/text.txt ~/txt/
本地拷贝到远程
   scp -P 52225 ~/vidoe/av.rmvb www-data@119.254.100.96:/var/www/av/
scp deploy@101.201.144.61:/var/www/qingke_shop/shared/public/system/entries/entryindices/7/medium/
——————————————————————————————————
【解决端口占用】

1.查看端口
终端输入：` 将port换成被占用的端口口(如：8086、9998)
将会出现占用端口的进程信息。
lsof -i tcp:3000
2.kill进程
找到进程的PID,使用kill命令：kill PID（进程的PID，如2044)
3.强制删除被占用的进程
kill -9 pid

——————————————————————————————————
【postgresql 数据常用操作】
psql -U postgres -h localhost -p 5432 koogle <
0、终端登录
  psql -U postgres -h localhost

1、备份数据库
  pg_dump -U postgres -h localhost -p 5432 dbname > /path/outfile

2、恢复数据库
  psql -U postgres -h localhost -p 5432 dbname < /path/infile

3、导入 sql 文件数据
  psql  -U postgres -W -d  justing_data -f anye.sql

4、安装
  apt-get install -y postgresql-9.1 postgresql-client-9.1 postgresql-contrib-9.1 postgresql-server-dev-9.1

5、启动
开机启动:
  ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
临时启动:
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
Or, if you don't want/need launchctl, you can just run:
  postgres -D /usr/local/var/postgres

6 service postgresql

Usage: /etc/init.d/postgresql {start|stop|restart|reload|force-reload|status} [version ..]

7.PostgreSQL登录(使用psql客户端登录)
   sudo -u postgres psql

8 修改PostgreSQL登录密码：
    ALTER USER postgres WITH PASSWORD 'postgres';

9 更多操作
   http://blog.chinaunix.net/uid-25885064-id-3404550.html

——————————————————————————————————
【cat命令】

cat主要有三大功能：
1.一次显示整个文件。$ cat filename
2.从键盘创建一个文件。$ cat > filename
   只能创建新文件,不能编辑已有文件.
3.将几个文件合并为一个文件： $cat file1 file2 > file
参数：
  -n 或 --number 由 1 开始对所有输出的行数编号
  cat -n a.txt > b.txt

  -b 或 --number-nonblank 和 -n 相似，只不过对于空白行不编号
  cat -b a.txt b.txt >> c.txt

  -s 或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行
  -v 或 --show-nonprinting

——————————————————————————————————
【CSV 格式数据导出导入】
model
  require ‘csv‘
  def self.to_csv(videos)
    CSV.generate do |csv|
      csv << ["\xEF\xBB\xBF序号",'视频标题','优酷编号','视频头图'] #解决乱码
      num = 0
      videos.each do |item|
        num += 1
        csv << [num,item.title,item.youku_id,item.video_cover]
      end
    end
  end

controller

def export_channel_video
    @videos = ChannelVideo.where(:channel_id => params[:channel_id])
    respond_to do |format|
      format.csv { send_data Channel.to_csv(@videos), filename: "#{Channel.find(params[:channel_id]).title}-[#{@videos.count}].csv", type: "application/csv;charset=utf-8" }
    end
  end

  def csv_create
    csv_text = params[:data_file].tempfile
    csv = CSV.parse(csv_text, :headers => true)
    count = 0
    csv.each do |item|
      count += 1
      data = Channel.new
      data.xxx = item[2]
      data.save!
    end
  end

——————————————————————————————————
【控制字符】

^H,\b等去除
gsub(/[\x00-\x08\x1b\x0b-\x0c\x0e-\x1f\x7f]/,"")

——————————————————————————————————
［任务进度条功能］
namespace :export do
  desc 'export post info'
  task :export_post_info => :environment do
    posts = Post.all.order(created_at: :desc)
    posts_export_file ||= "#{Rails.root}/tmp/data/posts-info-#{DateTime.now.strftime("%F")}(#{posts.count}).csv"
    Dir.mkdir(File.dirname(posts_export_file)) if !FileTest.exists?(File.dirname(posts_export_file))
    progressbar = ProgressBar.create(title:' Use',total: posts.count, format: '%t %a  %bᗧ%i %c/%C(%P%%)')
    CSV.open(posts_export_file, "wb") do |csv2|
      csv2 << ['\xEF\xBB\xBF序号','标题','链接','作者','创建时间']
      num = 0
      posts.each do |post|
        csv2 << [num +=1, post.title,"https://36kr.com/p/#{post.url_code}.html", post.author.display_name, post.created_at.strftime('%Y-%m-%d %H:%M:%S')]
        progressbar.increment
      end
    end
  end
end

irb 进度条

9000.times do |i|
  print ("="* (i / 90)).ljust(100) + "#{((i+1) / 90.0).round(4)}%\r"
  $stdout.flush
  sleep 0.001
end

————————————————————————————————————————————

【下拉选择参数】

<%= f.select :recommend,['★','★★','★★★','★★★★','★★★★★'],:prompt => '-------请选择------',:include_blank => true %>
:recommend后用[]添加选择的参数
:prmpt 添加提示文字
:include_blank 提供空值选项

————————————————————————————————————————————
【Ruby 异步请求跨域的问题】
Can't verify CSRF token authenticity
解决方法：
http://blog.csdn.net/yc1022/article/details/11907411
在controller 里加入
  skip_before_filter :verify_authenticity_token, :only => [:create]
 例子
def create
    @feedback = Feedback.new(params[:feedback])
    @feedback.content = params[:content]
    @feedback.contact = params[:contact]
      if @feedback.save
        tips = {response:200,tips:'成功',return:1}
      else
        tips = {response:200,tips:'失败',return:0}
      end
    render json: tips
  end

————————————————————————————————————————————

【发送定时任务】
链接地址：http://www.cnblogs.com/fantiantian/p/3388367.html
1、在Gemfile中加入
     gem 'rufus-scheduler'

2、在config/initializers/task.rb 中
#encoding : utf-8
require 'rufus-scheduler'
require 'jpush_api_ruby_client'
scheduler = Rufus::Scheduler.new

scheduler.every  '10s'  do  #每隔十秒发送一次
  local_time = Time.now.strftime('%Y-%m-%d %H:%M')
  @task = TimeTask.where('task_status=0')
  if !@task.blank?               #集合不为空则执行
    @task.each do |item|
      task_time = item.task_time.strftime('%Y-%m-%d %H:%M')
      if local_time == task_time
        app_key = '4f955ddda71b1e09e1ed71c7'
        master_secret = '87812ec711fabf7d16ff193f'
        push_client = JPushApiRubyClient::Client.new(app_key, master_secret,'platform' => JPushApiRubyClient::PlatformType::BOTH)
        send_no = push_client.generate_send_no
        msg_title = item.task_title
        msg_content = item.task_content
        receiver_value = item.task_tag
        push_client.send_notification_with_tag(send_no, receiver_value, msg_title, msg_content)
      end
    end
  end
   p "定时任务刷新完毕！当前时间#{local_time}"
 end

————————————————————————————————————————————

【实例化字符串-instance_eval】
解决问题
  <%= @itme.value+number+=1 %> #报错
  <%= @itme.instance_eval("value#{number+=1}") %> ==<%= @itme.value1 %>

————————————————————————————————————————————
【根据环境Rails.env动态调用】

gem fume-settable

配置app/model/settings.rb

class Settings < Fume::Settable::Base
  ruby_provider Rails.root.join('config/settings.rb') #引用文件路径

  def self.method_missing(name, *args, &block) #缺省方法
    settings.send(name, *args, &block)
  end
end

设置数据内容 /initializers/settings.rb
settings.action = {
  development: ‘A’,
  production: ‘B’,
  test: ‘C’
}

配置调用
Settings.action.send.(“#{Rails.env}”)

————————————————————————————————————————————
【生成随机字符串】

 [*'a'..'z',*'0'..'9',*'A'..'Z'].sample(6).join

100.times do

end

————————————————————————————————————————————
【字符串拼接、截取、问题】
string ="1421412423142314==\n"
string.gsub("==\n","==")
string.chomp                        #用于去除字符串末尾的\r,\n等
string ="1421412423142314=="
截取手机号后四位
phone=11122223333
3333 =phone[7,4]                #从第七位开始，截取四位

————————————————————————————————————————————
【数据保存有效数据】
如sum=1.543253245
sum.round(2)
sum = 1.54
————————————————————————————————————————————
【判断浏览器终端类型行为】

<script type="text/javascript">
/* 判断终端类型 */
!function(a){var b=/iPhone/i,c=/iPod/i,d=/iPad/i,e=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,f=/Android/i,g=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,h=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,i=/IEMobile/i,j=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,k=/BlackBerry/i,l=/BB10/i,m=/Opera Mini/i,n=/(CriOS|Chrome)(?=.*\bMobile\b)/i,o=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,p=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),q=function(a,b){return a.test(b)},r=function(a){var r=a||navigator.userAgent,s=r.split("[FBAN");return"undefined"!=typeof s[1]&&(r=s[0]),this.apple={phone:q(b,r),ipod:q(c,r),tablet:!q(b,r)&&q(d,r),device:q(b,r)||q(c,r)||q(d,r)},this.amazon={phone:q(g,r),tablet:!q(g,r)&&q(h,r),device:q(g,r)||q(h,r)},this.android={phone:q(g,r)||q(e,r),tablet:!q(g,r)&&!q(e,r)&&(q(h,r)||q(f,r)),device:q(g,r)||q(h,r)||q(e,r)||q(f,r)},this.windows={phone:q(i,r),tablet:q(j,r),device:q(i,r)||q(j,r)},this.other={blackberry:q(k,r),blackberry10:q(l,r),opera:q(m,r),firefox:q(o,r),chrome:q(n,r),device:q(k,r)||q(l,r)||q(m,r)||q(o,r)||q(n,r)},this.seven_inch=q(p,r),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window?this:void 0},s=function(){var a=new r;return a.Class=r,a};"undefined"!=typeof module&&module.exports&&"undefined"==typeof window?module.exports=r:"undefined"!=typeof module&&module.exports&&"undefined"!=typeof window?module.exports=s():"function"==typeof define&&define.amd?define("isMobile",[],a.isMobile=s()):a.isMobile=s()}(this);

(function(window, document, undefined) {
    var forbidPathnameRegs = [
      /\/web\/accessories/,
      /\/web\/cart_products/,
      /\/web\/carts/,
      /\/web\/lives/,
      /\/web\/orders/,
      /\/web\/products/,
      /\/web\/services/,
      /\/web\/shops/,
      /\/web\/user_addresses/,
      /\/web\/users/],
      len = forbidPathnameRegs.length,
      pathname = location.pathname,
      i, pathnameReg, newpathname;

    for(i = 0; i < len; i ++){
      pathnameReg =forbidPathnameRegs[i];

      if(pathnameReg.test(pathname)){
        return true;
      }
    }

    if(isMobile.phone){
      if('/' == pathname){
        newpathname = '/mobile/homes'
      }else if(/\/web\/abouts\/position/.test(pathname)){
        newpathname = '/mobile/positions'
      }else{
        newpathname = pathname.replace(/^\/web/, '/mobile');
      }
      if(newpathname != pathname){
        location.pathname = newpathname;
      }
    }
})(window, document);
</script>

————————————————————————————————————————————
【Migrate Type】

binary - is for storing data such as images, audio, or movies.
boolean - is for storing true or false values.
date - store only the date
datetime - store the date and time into a column.
decimal - is for decimals.
float - is for decimals. (What's the difference between decimal and float?)
integer - is for whole numbers.
primary_key - unique key that can uniquely identify each row in a table
string - is for small data types such as a title. (Should you choose string or text?)
text - is for longer pieces of textual data, such as a paragraph of information.
time - is for time only
timestamp - for storing date and time into a column.

————————————————————————————————————————————
ajaxFileUpload 上传文件

https://github.com/carlcarl/AjaxFileUpload/blob/master/ajaxfileupload.js

语法：$.ajaxFileUpload([options])

　　options参数说明：

1、url　　　　　　　　　　  上传处理程序地址。　　
2，fileElementId　　　　　  需要上传的文件域的ID，即<input type="file">的ID。
3，secureuri　　　　　　　 是否启用安全提交，默认为false。
4，dataType　　　　　　　 服务器返回的数据类型。可以为xml,script,json,html。如果不填写，jQuery会自动判断。
5，success　　　　　　　　提交成功后自动执行的处理函数，参数data就是服务器返回的数据。
6，error　　　　　　　　　 提交失败自动执行的处理函数。
7，data  　　　　　　　　　 自定义参数。这个东西比较有用，当有数据是与上传的图片相关的时候，这个东西就要用到了。
8, type 　　　　　　　　　  当要提交自定义参数时，这个参数要设置成post

view:
<input id='fileupload' name='fileupload' class="imgUpload" type="file" data-role="magic-overlay" data-target="#picBtn" data-edit="insertImage"/>

上传方法：
var uploadToServer = function(callback){
  $.ajaxFileUpload({
    url:'/admin/essay_pic_upload',
    secureurl : false,
    dataType : 'json',
    fileElementId : 'fileupload',
    success : function(data) {
      callback(data.img);
    },
    error : function() {
      alert('上传失败，请大小合适的图片');
    }
  });
};

方法调用：
uploadToServer(function(src){
  todo(src);
});

关于文件值上传一次的问题：
http://slnddd.iteye.com/blog/2314069

var newElement = $(oldElement).clone(); 改为
var newElement = $(oldElement).clone(true);

————————————————————————————————————————————
Chrome Console 引入 JQuery 可以直接调试get post 方法

var script = document.createElement('script');
script.src = "https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js";document.getElementsByTagName('head')[0].appendChild(script);

————————————————————————————————————————————
常用正则表达式
string =~ /^$/

验证数字：^[0-9]*$
验证n位的数字：^\d{n}$
验证至少n位数字：^\d{n,}$
验证m-n位的数字：^\d{m,n}$
验证零和非零开头的数字：^(0|[1-9][0-9]*)$
验证有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
验证有1-3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
验证非零的正整数：^\+?[1-9][0-9]*$
验证非零的负整数：^\-[1-9][0-9]*$
验证非负整数（正整数 + 0）  ^\d+$
验证非正整数（负整数 + 0）  ^((-\d+)|(0+))$
验证长度为3的字符：^.{3}$
验证由26个英文字母组成的字符串：^[A-Za-z]+$
验证由26个大写英文字母组成的字符串：^[A-Z]+$
验证由26个小写英文字母组成的字符串：^[a-z]+$
验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
验证由数字、26个英文字母或者下划线组成的字符串：^\w+$
验证用户密码:^[a-zA-Z]\w{5,17}$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。
验证是否含有 ^%&',;=?$\" 等字符：[^%&',;=?$\x22]+
验证汉字：^[\u4e00-\u9fa5],{0,}$
验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$
验证电话号码：^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。
验证身份证号（15位或18位数字）：^\d{15}|\d{}18$
验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12”
验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$    正确格式为：01、09和1、31。
整数：^-?\d+$
非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$
正浮点数   ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$
负浮点数  ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
浮点数  ^(-?\d+)(\.\d+)?$
————————————————————————————————————————————
logrotate 日志分离
https://linux.cn/article-4126-1.html#4_7909

新增日志分离配置
  vim /etc/logrotate.d/log-file
添加配置参数
/var/www/projects/current/log/production.log {
  su root root  #执行权限
  daily         #每天分离日志
  dateext       #添加日期后缀
  copytruncate  #复制截断，不对原日志做删除处理
  olddir /var/www/projects/current/log/productions #分离的日志保存目录
  nocompress    #原文件保存，不压缩
  missingok     #空文件跳过
  rotate 30     #保存最近30天的日志
  create 664 fox fox #新建的日志文件权限
}
设置分割日志的执行时间
  vim /etc/crontab
重启 cron
sudo service cron restart
手动调用
logrotate /etc/logrotate.conf
演示调用某个配置
logrotate -d /etc/logrotate.d/log-file

————————————————————————————————————————————
crontab 定时任务详解

使用指导
http://blog.csdn.net/xiyuan1999/article/details/8160998

在线测试
http://tool.lu/crontab/

添加指定用户的定时任务

crontab -u root -e

————————————————————————————————————————————

activerecord 提示 attribute 多语言

activerecord:
  attributes:
    user:
      email: '邮箱'

验证提示信息会自动翻译

————————————————————————————————————————————
Devise 覆盖原样式

config/initialize/devise.rb

config.scoped_views = true
————————————————————————————————————————————

Record 随机（rand or random）记录
In Rails 4, using Postgresql or SQLite, using RANDOM():

Model.order("RANDOM()").first
Presumably the same would work for MySQL with RAND()
————————————————————————————————————————————
 【去除空格字符】
1、strip 去除字符串首尾多余的空格
  ' x x x  '.strip => 'x x x'
2、gsub(/\s+/, ' ') 去除字符中的所有空格
  ' x x x  '.gsub(/\s+/, ' ') => 'xxx'
3、squish 去除字符首尾和字符中多余的空格
  ' x   x  x  '.squish => 'x x x'

————————————————————————————————————————————
【数据写入本地文件 File write】
file_path = '/Users/KoogleZhang/Downloads/'
File.open(File.join(file_path, 'users_info.csv'), 'w') do |f|
  User.all.each do |user|
    f.puts "#{user.email},#{user.encrypted_password},#{user.display_name}"
  end
end

————————————————————————————————————————————
【Google analytics 跟踪出站链接事件】

https://support.google.com/analytics/answer/1136920
<a href="http://www.example.com" onclick="trackOutboundLink('http://www.example.com'); return false;"></a>
<script>
var trackOutboundLink = function(url) {
  ga('send', 'event', 'outbound', 'click', url, {
    'transport': 'beacon',
    'hitCallback': function(){document.location = url;}
  });
}
</script>

————————————————————————————————————————————

SQL 按照固定行数取出数据
1、按照固定间隔行数取 如：15
SELECT FOME * T WHERE("(id+14)%15=0")

2、指定固定时间点返回数据 如：每30分钟一次
SELECT FOME * T WHERE("MINUTE(datetime)=0 or MINUTE(datetime)=30")

————————————————————————————————————————————

Faraday::SSLError: SSL_connect certificate verify failed

require 'openssl'
OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE

————————————————————————————————————————————
 递归二元数组,并排列组合

data = [[1,2],[3,4],[5,6]]

def recursive_array(data,list,length=0)
  if data.length == 0
    return nil
  elsif list.empty?
    list = data[length]
  else
    var_ary = []
    list.each do |v1|
      data[length].each do |v2|
        var_ary << v1 + v2
      end
    end
    list = var_ary
    p list
  end
  recursive_array(data,list,length + 1) if length < data.size - 1
end

————————————————————————————————————————————
机器学习

视频 https://www.youtube.com/watch?v=M_DUmyRIkQ8

库 'ruby_linear_regression'

公共 API  https://keras.io

————————————————————————————————————————————
Url Encode 格式转换

URI.encode
[http://doc.rubyfans.com/ruby/v2.4/classes/URI/Escape.html#method-i-encode]

CGI::escape

URL-encode a string
[http://doc.rubyfans.com/ruby/v2.4/classes/CGI/Util.html]


————————————————————————————————————————————
获取 Class 的子类
[descendants_tracker]

https://github.com/dkubb/descendants_tracker

class Foo
  extend DescendantsTracker
end

class Bar < Foo
end

Foo.descendants # => [Bar]

————————————————————————————————————————————

HTML input 黄色背景 解决

input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input:-webkit-autofill:active {
    -webkit-transition-delay: 99999s;
    -webkit-transition: color 99999s ease-out, background-color 99999s ease-out;
}
————————————————————————————————————————————

获取验证码倒计时

<script type="text/javascript">
  function getCode(obj,n){
    var title=obj.text;
    (function(){
      if(n>0){
        obj.removeAttribute("onclick")
        obj.text='倒计时'+(n--)+'秒';
        setTimeout(arguments.callee,1000);
      }else{
        obj.setAttribute("onclick","getCode(this,30);");
        obj.text=title;
      }
    })();
  }
</script>
————————————————————————————————————————————
计算两个坐标之间的直线距离

  def distance(y1,x1,y2,x2)
    radius = 6370693.5
    radian = Math::PI/180
    ry1 = y1.to_f * radian
    rx1 = x1.to_f * radian
    ry2 = y2.to_f * radian
    rx2 = x2.to_f * radian
    dry = ry1 - ry2
    #如果跨度不在一个半球范围
    if dry > Math::PI
      dry = 2 * Math::PI - dry
    elsif dry < -Math::PI
      dry = 2 * Math::PI + dry
    end
    dx = radius * Math.cos(rx1) * dry
    dy = radius * (rx1 - rx2)
    Math.hypot(dx,dy).to_f
  end

————————————————————————————————————————————
链接不同的数据库进行互不影响操作 主从数据库

https://www.ruby-toolbox.com/categories/Active_Record_Sharding

https://github.com/kovyrin/db-charmer

https://github.com/thiagopradi/octopus


establish_connection

https://www.thegreatcodeadventure.com/managing-multiple-databases-in-a-single-rails-application/

ActiveRecord::Base.establish_connection

Model.establish_connection(:production)

————————————————————————————————————————————
 处理二进制文件 binary

示例 https://github.com/kooogle/ipip/blob/master/lib/ipip/ipv4_database_x.rb

 IO.binread ipip.datx

————————————————————————————————————————————
方法调用
输出当前方法的引用相关位置

 caller

 Thread.current.backtrace

 ————————————————————————————————————————————